====== Nginx配置文件详细说明 ======

在此记录下Nginx服务器nginx.conf的配置文件说明, 部分注释收集与网络.


#定义Nginx运行的用户和用户组
  user www www;    
#启动进程,通常设置成和cpu的数量相等
  worker_processes  8;

#全局错误日志定义类型，[debug|info|notice|warn|error|crit]及PID文件
  error_log  /var/log/nginx/error.log;
  pid        /var/run/nginx.pid;

#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。
  worker_rlimit_nofile 65535;

#工作模式及连接数上限
  events {
  #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use   epoll;              #epoll是多路复用的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  1024; #单个后台worker process进程的最大并发链接数
    # multi_accept on; 
  }

#设定http服务器，利用它的反向代理功能提供负载均衡支持
  http {
    include       /etc/nginx/mime.types;      #设定mime类型,类型由mime.type文件定义
    default_type  application/octet-stream;   #默认文件类型
    access_log    /var/log/nginx/access.log;  #设定日志格式

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #charset utf-8; #默认编码
    server_names_hash_bucket_size 128; #服务器名字的hash表大小
    client_header_buffer_size 32k; #上传文件大小限制
    large_client_header_buffers 4 64k; #设定请求缓
    client_max_body_size 8m; #设定请求缓
    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。
    tcp_nopush on; #防止网络阻塞
    tcp_nodelay on; #防止网络阻塞
    keepalive_timeout 120; #长连接超时时间，单位是秒
    
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k; #最小压缩文件大小
    gzip_buffers 4 16k; #压缩缓冲区
    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 2; #压缩等级
    gzip_types text/plain application/x-javascript text/css application/xml;
  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;

    #设定请求缓冲
    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    #设定负载均衡的服务器列表
    upstream mysvr {
    #weigth参数表示权值，权值越高被分配到的几率越大
    #本机上的Squid开启3128端口
        server 192.168.8.1:3128 weight=5;
        server 192.168.8.2:80   weight=1;
        server 192.168.8.3:80   weight=6;
    }

   server {
        listen       80;                              #侦听80端口
        server_name  www.xx.com;                      #定义使用www.xx.com访问
        access_log  logs/www.xx.com.access.log  main; #设定本虚拟主机的访问日志

    #默认请求
    location / {
          root   /root;                           #定义服务器的默认网站根目录位置
          index index.php index.html index.htm;   #定义首页索引文件的名称
          fastcgi_pass   www.xx.com;
          fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; 
          include /etc/nginx/fastcgi_params;
        }

    # 定义错误提示页面
    error_page   500 502 503 504 /50x.html;  
        location = /50x.html {
        root   /root;
    }

    #静态文件，nginx自己处理
    location ~ ^/(images|javascript|js|css|flash|media|static)/ {
        root /var/www/virtual/htdocs;
        expires 30d;   #过期30天
    }
    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.
    location ~ \.php$ {
        root /root;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;
        include fastcgi_params;
    }
    #设定查看Nginx状态的地址
    location /NginxStatus {
        stub_status            on;
        access_log              on;
        auth_basic              "NginxStatus";
        auth_basic_user_file  conf/htpasswd;
    }
    #禁止访问 .htxxx 文件
    location ~ /\.ht {
        deny all;
    }
  }
  }

以上是一些基本的配置,使用Nginx最大的好处就是负载均衡如果要使用负载均衡的话,可以修改配置http节点如下：

  #设定http服务器，利用它的反向代理功能提供负载均衡支持
  http {
     #设定mime类型,类型由mime.type文件定义
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    #设定日志格式
    access_log    /var/log/nginx/access.log;

    #设定负载均衡的服务器列表
    upstream mysvr {
    #weigth参数表示权值，权值越高被分配到的几率越大
    server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口
    server 192.168.8.2x:80  weight=1;
    server 192.168.8.3x:80  weight=6;
    }

   upstream mysvr2 {
    #weigth参数表示权值，权值越高被分配到的几率越大
    server 192.168.8.x:80  weight=1;
    server 192.168.8.x:80  weight=6;
    }

   #第一个虚拟服务器
   server {
    #侦听192.168.8.x的80端口
        listen       80;
        server_name  192.168.8.x;

    #对aspx后缀的进行负载均衡请求
    location ~ .*\.aspx$ {
          root   /root;                           #定义服务器的默认网站根目录位置
          index index.php index.html index.htm;   #定义首页索引文件的名称
          proxy_pass  http://mysvr ;              #请求转向mysvr 定义的服务器列表
          #以下是一些反向代理的配置可删除.
          proxy_redirect off;
          #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          client_max_body_size 10m;        #允许客户端请求的最大单文件字节数
          client_body_buffer_size 128k;    #缓冲区代理缓冲用户端请求的最大字节数，
          proxy_connect_timeout 90;        #nginx跟后端服务器连接超时时间(代理连接超时)
          proxy_send_timeout 90;           #后端服务器数据回传时间(代理发送超时)
          proxy_read_timeout 90;           #连接成功后，后端服务器响应时间(代理接收超时)
          proxy_buffer_size 4k;            #设置代理服务器（nginx）保存用户头信息的缓冲区大小
          proxy_buffers 4 32k;             #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
          proxy_busy_buffers_size 64k;     #高负荷下缓冲大小（proxy_buffers*2）
          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传
       }
     }
  }



====== nginx重定向规则详细介绍 ======
 
===== rewrite命令 =====

nginx的rewrite相当于apache的rewriterule(大多数情况下可以把原有apache的rewrite规则加上引号就可以直接使用)，它可以用在server,location 和IF条件判断块中,命令格式如下：
  rewrite 正则表达式 替换目标 flag标记
flag标记可以用以下几种格式：
  last – 基本上都用这个Flag。
  break – 中止Rewirte，不在继续匹配
  redirect – 返回临时重定向的HTTP状态302
  permanent – 返回永久重定向的HTTP状态301
例如下面这段设定nginx将某个目录下面的文件重定向到另一个目录,$2对应第二个括号(.*)中对应的字符串：
  location /download/ {
    rewrite ^(/download/.*)/m/(.*)\..*$ $1/nginx-rewrite/$2.gz break;
  } 

===== nginx重定向的IF条件判断 =====

在server和location两种情况下可以使用nginx的IF条件判断，条件可以为以下几种：

正则表达式匹配
  ~  为区分大小写匹配;   !~ 为区分大小写不匹配
  ~* 为不区分大小写匹配；!~* 为不区分大小写不匹配
例如下面设定nginx在用户使用ie的使用重定向到/nginx-ie目录下：
  if ($http_user_agent ~ MSIE) {
    rewrite ^(.*)$ /nginx-ie/$1 break;
  } 

文件和目录判断
  -f和!-f判断是否存在文件
  -d和!-d判断是否存在目录
  -e和!-e判断是否存在文件或目录
  -x和!-x判断文件是否可执行
例如下面设定nginx在文件和目录不存在的时候重定向：
  if (!-e $request_filename) {
    proxy_pass http://127.0.0.1/;
  } 

return，返回http代码，例如设置nginx防盗链：
  location ~* \.(gif|jpg|png|swf|flv)$ {
    valid_referers none blocked http://www.jefflei.com/ http://www.leizhenfang.com/;
    if ($invalid_referer) {
      return 404;
    }
  } 


===== 301重定向方法 =====
 

进行了301重定向，把www .jefflei.com和jefflei.com合并，并把之前的域名也一并合并. 有两种实现方法,第一种方法是判断nginx核心变量host(老版本是http_host)：
  server {
    server_name www.jefflei.com jefflei.com ;
    if ($host != 'www.jefflei.com' ) {
      rewrite ^/(.*)$ http://www.jefflei.com/$1 permanent;
    }
    ...
  }
第二种方法：
  server {
    server_name jefflei.com;
    rewrite ^/(.*) http://www.jefflei.com/$1 permanent;
  } 

测试了第一种方法ok，这两种方法中， permanent是关键，详细说明见nginx重定向规则说明。 

  last – 基本上都用这个Flag。
  break – 中止Rewirte，不在继续匹配
  redirect – 返回临时重定向的HTTP状态302
  permanent – 返回永久重定向的HTTP状态301 

好了,现在可以检查结果，这里可以看返回的HTTP头信息：http://www.seoconsultants.com/tools/headers.asp 第二种方法没有测试成功... 

===== nginx rewrite 伪静态配置参数详细说明 =====

正则表达式匹配，其中： 
  * ~ 为区分大小写匹配 
  * ~* 为不区分大小写匹配 
  * !~和!~*分别为区分大小写不匹配及不区分大小写不匹配 

文件及目录匹配，其中： 
  * -f和!-f用来判断是否存在文件 
  * -d和!-d用来判断是否存在目录 
  * -e和!-e用来判断是否存在文件或目录 
  * -x和!-x用来判断文件是否可执行

flag标记有： 
  * last 相当于Apache里的[L]标记，表示完成rewrite 
  * break 终止匹配, 不再匹配后面的规则 
  * redirect 返回302临时重定向 地址栏会显示跳转后的地址 
  * permanent 返回301永久重定向 地址栏会显示跳转后的地址

一些可用的全局变量有，可以用做条件判断(待补全) 
  $args 
  $content_length 
  $content_type 
  $document_root 
  $document_uri 
  $host 
  $http_user_agent 
  $http_cookie 
  $limit_rate 
  $request_body_file 
  $request_method 
  $remote_addr 
  $remote_port 
  $remote_user 
  $request_filename 
  $request_uri 
  $query_string 
  $scheme 
  $server_protocol 
  $server_addr 
  $server_name 
  $server_port 
  $uri
结合QeePHP的例子 

  if (!-d $request_filename) { 
    rewrite ^/([a-z-A-Z]+)/([a-z-A-Z]+)/?(.*)$ /index.php?namespace=user&controller=$1&action=$2&$3 last; 
    rewrite ^/([a-z-A-Z]+)/?$ /index.php?namespace=user&controller=$1 last; 
    break;
   多目录转成参数
   abc.domian.com/sort/2 => abc.domian.com/index.php?act=sort&name=abc&id=2 
   
  if ($host ~* (.*)\.domain\.com) { 
    set $sub_name $1; 
    rewrite ^/sort\/(\d+)\/?$ /index.php?act=sort&cid=$sub_name&id=$1 last; 
  }
目录对换
  /123456/xxxx -> /xxxx?id=123456 

  rewrite ^/(\d+)/(.+)/ /$2?id=$1 last;
例如下面设定nginx在用户使用ie的使用重定向到/nginx-ie目录下： 

  if ($http_user_agent ~ MSIE) { 
    rewrite ^(.*)$ /nginx-ie/$1 break; 
  }
目录自动加“/” 
  if (-d $request_filename){ 
    rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent; 
  }
禁止htaccess 
  location ~/\.ht { 
    deny all; 
  }
禁止多个目录 
  location ~ ^/(cron|templates)/ { 
    deny all; 
    break; 
  }
禁止以/data开头的文件，可以禁止/data/下多级目录下.log.txt等请求; 
  location ~ ^/data { 
   deny all; 
  }
禁止单个目录，不能禁止.log.txt能请求 
  location /searchword/cron/ { 
    deny all; 
  }
禁止单个文件 
  location ~ /data/sql/data.sql { 
    deny all; 
  }
给favicon.ico和robots.txt设置过期时间;这里为favicon.ico为99 天,robots.txt为7天并不记录404错误日志 
  location ~(favicon.ico) { 
    log_not_found off; 
    expires 99d; 
    break; 
  } 

  location ~(robots.txt) { 
    log_not_found off; 
    expires 7d; 
    break; 
  }
设定某个文件的过期时间;这里为600秒，并不记录访问日志 
  location ^~ /html/scripts/loadhead_1.js { 
    access_log off; 
    root /opt/lampp/htdocs/web; 
    expires 600; 
    break; 
  }
文件反盗链并设置过期时间， 这里的return 412 为自定义的http状态码，默认为403，方便找出正确的盗链的请求
  “rewrite ^/ http://leech.c1gstudio.com/leech.gif;”显示一张防盗链图片
  “access_log off;”不记录访问日志，减轻压力
  “expires 3d”所有文件3天的浏览器缓存 

  location ~* ^.+\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ { 
    valid_referers none blocked *.c1gstudio.com *.c1gstudio.net localhost 208.97.167.194; 
    if ($invalid_referer) { 
      rewrite ^/ http://leech.c1gstudio.com/leech.gif; 
      return 412; 
      break; 
    } 
    access_log off; 
    root /opt/lampp/htdocs/web; 
    expires 3d; 
    break; 
  }
只充许固定ip访问网站，并加上密码 
  root /opt/htdocs/www; 
    allow 208.97.167.194; 
    allow 222.33.1.2; 
    allow 231.152.49.4; 
    deny all; 
    auth_basic "C1G_ADMIN"; 
    auth_basic_user_file htpasswd;
将多级目录下的文件转成一个文件，增强seo效果，/job-123-456-789.html 指向/job/123/456/789.html 
  rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+)\.html$ /job/$1/$2/jobshow_$3.html last;
将根目录下某个文件夹指向2级目录，如/shanghaijob/ 指向 /area/shanghai/如果你将last改成permanent，那么浏览器地址栏显是 /location/shanghai/ 
  rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
上面例子有个问题是访问/shanghai 时将不会匹配 
  rewrite ^/([0-9a-z]+)job$ /area/$1/ last; 
  rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
这样/shanghai 也可以访问了，但页面中的相对链接无法使用，如./list_1.html真实地址是/area /shanghia/list_1.html会变成/list_1.html,导至无法访问。 

那我加上自动跳转也是不行咯，(-d $request_filename)它有个条件是必需为真实目录，而我的rewrite不是的，所以没有效果 
  if (-d $request_filename){ 
    rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent; 
  }
知道原因后就好办了，让我手动跳转吧 
  rewrite ^/([0-9a-z]+)job$ /$1job/ permanent; 
  rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last;
文件和目录不存在的时候重定向： 
  if (!-e $request_filename) { 
    proxy_pass http://127.0.0.1/; 
  }
域名跳转 
  server 
  { 
    listen 80; 
    server_name jump.c1gstudio.com; 
    index index.html index.htm index.php; 
    root /opt/lampp/htdocs/www; 
    rewrite ^/ http://www.c1gstudio.com/; 
    access_log off; 
  }
多域名转向 
  server_name http://www.c1gstudio.com/ http://www.c1gstudio.net/; 
    index index.html index.htm index.php; 
    root /opt/lampp/htdocs; 
    if ($host ~ "c1gstudio\.net") { 
      rewrite ^(.*) http://www.c1gstudio.com$1/ permanent; 
  }
三级域名跳转 
  if ($http_host ~* "^(.*)\.i\.c1gstudio\.com$") { 
    rewrite ^(.*) http://top.yingjiesheng.com$1/; 
    break; 
  }
域名镜向 
  server 
  { 
    listen 80; 
    server_name mirror.c1gstudio.com; 
    index index.html index.htm index.php; 
    root /opt/lampp/htdocs/www; 
    rewrite ^/(.*) http://www.c1gstudio.com/$1 last; 
    access_log off; 
  }
某个子目录作镜向 
  location ^~ /zhaopinhui { 
    rewrite ^.+ http://zph.c1gstudio.com/ last; 
    break; 
  }
  discuz ucenter home (uchome) rewrite 

  rewrite ^/(space|network)-(.+)\.html$ /$1.php?rewrite=$2 last; 
  rewrite ^/(space|network)\.html$ /$1.php last; 
  rewrite ^/([0-9]+)$ /space.php?uid=$1 last;
  discuz 7 rewrite 

  rewrite ^(.*)/archiver/((fid|tid)-[\w\-]+\.html)$ $1/archiver/index.php?$2 last; 
  rewrite ^(.*)/forum-([0-9]+)-([0-9]+)\.html$ $1/forumdisplay.php?fid=$2&page=$3 last; 
  rewrite ^(.*)/thread-([0-9]+)-([0-9]+)-([0-9]+)\.html$ $1/viewthread.php?tid=$2&extra=page\%3D$4&page=$3 last; 
  rewrite ^(.*)/profile-(username|uid)-(.+)\.html$ $1/viewpro.php?$2=$3 last; 
  rewrite ^(.*)/space-(username|uid)-(.+)\.html$ $1/space.php?$2=$3 last; 
  rewrite ^(.*)/tag-(.+)\.html$ $1/tag.php?name=$2 last;
给discuz某版块单独配置域名 

  server_name bbs.c1gstudio.com news.c1gstudio.com; 

  location = / { 
    if ($http_host ~ news\.c1gstudio.com$) { 
    rewrite ^.+ http://news.c1gstudio.com/forum-831-1.html last; 
    break; 
    } 
  }
discuz ucenter 头像 rewrite 优化 

  location ^~ /ucenter { 
    location ~ .*\.php?$ 
    { 
    #fastcgi_pass unix:/tmp/php-cgi.sock; 
    fastcgi_pass 127.0.0.1:9000; 
    fastcgi_index index.php; 
    include fcgi.conf; 
  } 

  location /ucenter/data/avatar { 
  log_not_found off; 
  access_log off; 
  location ~ /(.*)_big\.jpg$ { 
    error_page 404 /ucenter/images/noavatar_big.gif; 
  } 
  location ~ /(.*)_middle\.jpg$ { 
    error_page 404 /ucenter/images/noavatar_middle.gif; 
  } 
  location ~ /(.*)_small\.jpg$ { 
    error_page 404 /ucenter/images/noavatar_small.gif; 
  } 
    expires 300; 
    break; 
    } 
  }
  jspace rewrite 

  location ~ .*\.php?$ 
  { 
    #fastcgi_pass unix:/tmp/php-cgi.sock; 
    fastcgi_pass 127.0.0.1:9000; 
    fastcgi_index index.php; 
    include fcgi.conf; 
  } 

  location ~* ^/index.php/ 
  { 
    rewrite ^/index.php/(.*) /index.php?$1 break; 
    fastcgi_pass 127.0.0.1:9000; 
    fastcgi_index index.php; 
    include fcgi.conf; 
  } 



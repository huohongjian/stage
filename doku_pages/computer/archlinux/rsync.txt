
====== linux下两台服务器文件实时同步方案设计和实现 ======


inotify-toolsrsync同步linux实时同步inotify

linux下两台服务器文件实时同步方案设计和实现


假设有如下需求：

假设两个服务器：

192.168.0.1 源服务器  有目录 /opt/test/

192.168.0.2 目标服务器  有目录 /opt/bak/test/

实现的目的就是保持这两个服务器某个文件目录保持实时同步


实现方式： 通过rsync+inotify-tools结合来实现


需要安装软件：

1.  rsync 同步软件


   在 源服务器 和 目标服务器 都需要安装

 
   源服务器： 是rsync客户端，不需要配置

 目标服务器： 是rsync服务器端，需要配置/etc/rsyncd.conf里的内容


  安装后需要新建配置文件：/etc/rsyncd.conf

  配置文件在： /etc/


文件内容如下：

uid = root
gid = root
use chroot = no
max connections = 10
strict modes = yes
pid file=/var/run/rsyncd.pid
lock file=/var/run/rsyncd.lock
log file= =/var/run/rsyncd.log

[www]
path= /opt/bak/test
comment= analyse
read only = false
hosts allow = *


  

2.  inotify-tools 工具

该工具为文件实时监控工具，需要linux操作系统内核支持，内核支持需要至少版本为2.6.13

检查操作系统是否支持，执行如下：

uname -r  查看版本

返回：

2.6.32-220.4.1.el6.x86_64


则表示版本2.6.32 大于2.6.13，则支持。

执行：

ll /proc/sys/fs/inotify
total 0
-rw-r--r-- 1 root root 0 Oct 18 12:18 max_queued_events
-rw-r--r-- 1 root root 0 Oct 18 12:18 max_user_instances
-rw-r--r-- 1 root root 0 Oct 18 12:18 max_user_watches

有三项输出,则表示默认支持inotify,可以安装inotify-tools工具.


如果不支持，需要采用新版本的linux操作系统

版本达到要求，就可以安装了。

安装inotify-tools后会在相关安装目录下生成如下两个文件：

ll /usr/local/bin/
total 88
-rwxr-xr-x 1 root root 44327 Oct 10 15:32 inotifywait
-rwxr-xr-x 1 root root 41417 Oct 10 15:32 inotifywatch

则表示安装成功。


注意： 在 源服务器上需要安装，目标服务器上不需要安装inotify。


3. 相关脚本：


 在源服务器上新建脚本：

inotify_bak.sh

#!/bin/bash
src=/opt/test/
/usr/local/bin/inotifywait -mrq --timefmt '%d/%m/%y %H:%M' --format '%T %w%f%e' -e close_write,delete,create,attrib $src |  while read file
do
   
      /usr/bin/rsync -arzuq $src 192.168.0.2::www/

      echo "  ${file} was rsynced" >>/opt/soft/log/rsync.log 2>&1
done

 

注意： 这里的 www 是在目标服务器/etc/rsyncd.conf里配置的模块名称：[www]

 

赋予执行权限： chmod +x  inotify_bak.sh

然后执行： inotify_bak.sh &  放入后台执行

 

4. 关于启动

   目标服务器：先启动rsync后台服务： /usr/bin/rsync --daemon

   来源服务器： 执行 inotify_bak.sh & 


5. 测试：

   在来源服务器目录中新建目录和文件，inotify_bak.sh脚本会检测到，然后同步到目标服务器的相关目录下

 
   可以查看日志文件： /opt/soft/log/rsync.log 命令如下：观察实时同步的情况。

   tail -f  /opt/soft/log/rsync.log
















Linux下使用rsync 同步文件夹

备份是系统管理中最艰巨、最容易被忽略的工作之一，同时也是最重要的工作之一。备份是防御硬件故障、非法入侵和系统安全的最大威胁——终端用户的最后一道防线。

Rsync 是一个小巧的算法的强大实现。它最基本的功能是高效地镜像一个文件系统的能力。使用 rsync，可以灵活地选用一组网络协议，诸如 nfs、smb 或 ssh，方便地让一个文件系统与另一个文件系统保持同步更新。Rsync 的第二个功能，也就是备份系统使用的功能，它可以把已经发生改变或是被删除的文件的老的版本归档。

1.1  软件简介

Rsync是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。Rsync本来是用以取代rcp的一个工具，它当前由rsync.samba.org维护。Rsync使用所谓的“Rsync演算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快。运行Rsync server的机器也叫backup server，一个Rsync server可同时备份多个client的数据；也可以多个Rsync server备份一个client的数据。
Rsync可以搭配rsh或ssh甚至使用daemon模式。Rsync server会打开一个873的服务通道(port)，等待对方Rsync连接。连接时，Rsync server会检查口令是否相符，若通过口令查核，则可以开始进行文件传输。第一次连通完成时，会把整份文件传输一次，下一次就只传送二个文件之间不同的部份。
Rsync支持大多数的类Unix系统，无论是Linux、Solaris还是BSD上都经过了良好的测试。此外，它在windows平台下也有相应的版本，比较知名的有cwRsync和Sync2NAS。

Rsync的基本特点如下：
1.可以镜像保存整个目录树和文件系统；
2.可以很容易做到保持原来文件的权限、时间、软硬链接等；
3.无须特殊权限即可安装；
4.优化的流程，文件传输效率高；
5.可以使用rcp、ssh等方式来传输文件，当然也可以通过直接的socket连接；
6.支持匿名传输。

1.3  命令语法

rsync的命令格式可以为以下六种：

    rsync [OPTION]… SRC DEST
    rsync [OPTION]… SRC [USER@]HOST:DEST
    rsync [OPTION]… [USER@]HOST:SRC DEST
    rsync [OPTION]… [USER@]HOST::SRC DEST
    rsync [OPTION]… SRC [USER@]HOST::DEST
    rsync [OPTION]… rsync://[USER@]HOST[:PORT]/SRC [DEST]

对应于以上六种命令格式，rsync有六种不同的工作模式：
1)拷贝本地文件。当SRC和DES路径信息都不包含有单个冒号”:”分隔符时就启动这种工作模式。
2)使用一个远程shell程序（如rsh、ssh）来实现将本地机器的内容拷贝到远程机器。当DST路径地址包含单个冒号”:”分隔符时启动该模式。
3)使用一个远程shell程序（如rsh、ssh）来实现将远程机器的内容拷贝到本地机器。当SRC地址路径包含单个冒号”:”分隔符时启动该模式。
4)从远程rsync服务器中拷贝文件到本地机。当SRC路径信息包含”::”分隔符时启动该模式。
5)从本地机器拷贝文件到远程rsync服务器中。当DST路径信息包含”::”分隔符时启动该模式。
6)列远程机的文件列表。这类似于rsync传输，不过只要在命令中省略掉本地机信息即可。

1 同步本机文件测试

rsync –help
你可以看到很多参数，选择自己觉得需要的参数即可。

先测试一下本机同步：

    rsync -vzrtopgu –progress /Data/scripts/ /tmp/back_srcipt/

会看到文件在传输，再运行一次，就知道没有运行复制，因为文件没有修改过

增加文件测试：
touch /Data/scripts/test.txt

再运行上面的脚本就可以看到把这个新文件传输过去了，没有复制别的文件。

3 服务器间同步文件

要在服务器间rsync传输文件，需要有一个是开着rsync的服务，而这一服务需要一个配置文件，说明当前运行的用户名和用户组，这个用户名和用户组讲在改变文件权限和相关内容的时候有用，否则有时候会出现提示权限问题。配置文件也说明了模块，模块化管理服务的安全性，每个模块的名称都是自己定义的，可以添加用户名密码验证，也可以验证IP，设置目录是否可写等。

    vi /etc/rsyncd.conf

    uid=root
    gid=root
    #这里指定的用户名和用户组是root，权限过高了，出于安全考虑可以用别的

    [web_aslibra]
    # 这里是认证的模块名，在client端需要指定
    path = /Data/webapps/www.aslibra.com/
    # 需要做镜像的目录
    comment = test
    ignore errors
    # 可以忽略一些无关的IO错误
    read only = yes
    # 只读，如果是no，则可以从client发送文件到此服务器
    list = no
    # 不允许列文件
    auth users = aslibra
    # 认证的用户名，如果没有这行，则表明是匿名
    secrets file = /etc/rsyncd.pass
    # 认证文件名

    [web_aslibra_public]
    path = /Data/webapps/www.aslibra.com/
    ignore errors
    read only = yes
    list = no

    [web_aslibra_write]
    path = /Data/webapps/www.aslibra.com/
    ignore errors
    read only = no
    hosts allow = 192.168.1.2
    list = no

服务启动方式：

/Data/apps/rsync/bin/rsync –daemon

第一个模块，用户验证方式，需要指定用户名密码：

在/etc/下新建一文件rsyncd.pass
#vi /etc/rsyncd.pass
aslibra:aslibra.com
一行一个用户，用户名:密码
修改rsyncd.pass权限
chmod 600 /etc/rsyncd.pass
此步省略会导致rsync无法启动

客户端也需要有密码文件，当然路径可以不一样

rsync -rvlHpogDtS –progress –password-file=/etc/rsyncd.pass aslibra@192.168.1.3::web_aslibra /tmp/aslibra.com/

注意:客户端密码文件只保存一个密码!不要带上用户名,权限设置为600

第二个模块是没有验证的情况，都可读

rsync -rvlHpogDtS –progress aslibra@192.168.1.3::web_aslibra_public /tmp/aslibra.com/

第三个是验证ip，而且可写

发送文件很简单，把后面两个参数反过来就可以，拿上一个例子

rsync -rvlHpogDtS –progress /tmp/aslibra.com/ aslibra@192.168.1.3::web_aslibra_public

这样会提示出错，因为web_aslibra_public是只读的

rsync -rvlHpogDtS –progress /tmp/aslibra.com/ aslibra@192.168.1.3::web_aslibra_write

这样就可以了，但要看从哪个IP来的了，否则也失败

下面是摘录的一些详细的参数说明：

rsyncd.conf参数
uid
该选项指定当该模块传输文件时守护进程应该具有的uid，配合gid选项使用可以确定哪些可以访问怎么样的文件权限，默认值是”nobody”。
gid
该选项指定当该模块传输文件时守护进程应该具有的gid。默认值为”nobody”。
exlude
用来指定多个由空格隔开的多个模式列表，并将其添加到exclude列表中。这等同于在客户端命令中使用–exclude来指定模式，不过配置文件中指定的exlude模式不会传递给客户端，而仅仅应用于服务器。一个模块只能指定一个exlude选项，但是可以在模式前面使用”-”和”+”来指定是exclude还是include。
但是需要注意的一点是该选项有一定的安全性问题，客户很有可能绕过exlude列表，如果希望确保特定的文件不能被访问，那就最好结合uid/gid选项一起使用。
exlude from
指定一个包含exclude模式的定义的文件名，服务器从该文件中读取exlude列表定义。
include
用来指定多个由空格隔开的多个rsync并应该exlude的模式列表。这等同于在客户端命令中使用–include来指定模式，结合include和exlude可以定义复杂的exlude/include规则。一个模块只能指定一个include选项，但是可以在模式前面使用”-”和”+”来指定是exclude还是include。
include from
指定一个包含include模式的定义的文件名，服务器从该文件中读取include列表定义。
auth users
该选项指定由空格或逗号分隔的用户名列表，只有这些用户才允许连接该模块。这里的用户和系统用户没有任何关系。如果”auth users”被设置，那么客户端发出对该模块的连接请求以后会被rsync请求challenged进行验证身份这里使用的challenge/response认证协议。用户的名和密码以明文方式存放在”secrets file”选项指定的文件中。默认情况下无需密码就可以连接模块(也就是匿名方式)。
secrets file
该选项指定一个包含定义用户名:密码对的文件。只有在”auth users”被定义时，该文件才有作用。文件每行包含一个username:passwd对。一般来说密码最好不要超过8个字符。没有默认的secures file名，需要限式指定一个。(例如：/etc/rsyncd.secrets)
strict modes
该选项指定是否监测密码文件的权限，如果该选项值为true那么密码文件只能被rsync服务器运行身份的用户访问，其他任何用户不可以访问该文件。默认值为true。
hosts allow
该选项指定哪些IP的客户允许连接该模块。客户模式定义可以是以下形式：
o xxx.xxx.xxx.xxx，客户主机只有完全匹配该IP才允许访问。例如：192.167.0.1
o a.b.c.d/n，属于该网络的客户都允许连接该模块。例如：192.168.0.0/24
o a.b.c.d/e.f.g.h，属于该网络的客户都允许连接该模块。例如：192.168.0.0/255.255.255.0
o 一个主机名，客户主机只有拥有该主机名才允许访问，例如：backup.linuxaid.com.cn。
o *.linuxaid.com.cn，所有属于该域的主机都允许。
默认是允许所有主机连接。
hosts deny
指定不允许连接rsync服务器的机器，可以使用hosts allow的定义方式来进行定义。默认是没有hosts deny定义

ignore errors
指定rsyncd在判断是否运行传输时的删除操作时忽略server上的IP错误，一般来说rsync在出现IO错误时将将跳过–delete操作，以防止因为暂时的资源不足或其它IO错误导致的严重问题。
ignore nonreadable
指定rysnc服务器完全忽略那些用户没有访问权限的文件。这对于在需要备份的目录中有些文件是不应该被备份者得到的情况是有意义的

    客户端同步命令
    v, –verbose 详细模式输出
    -q, –quiet 精简输出模式
    -c, –checksum 打开校验开关，强制对文件传输进行校验
    -a, –archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD
    -r, –recursive 对子目录以递归模式处理
    -R, –relative 使用相对路径信息

    rsync foo/bar/foo.c remote:/tmp/

    则在/tmp目录下创建foo.c文件，而如果使用-R参数：

    rsync -R foo/bar/foo.c remote:/tmp/

    则会创建文件/tmp/foo/bar/foo.c，也就是会保持完全路径信息。

    -b, –backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用–suffix选项来指定不同的备份文件前缀。
    –backup-dir 将备份文件(如~filename)存放在在目录下。
    -suffix=SUFFIX 定义备份文件前缀
    -u, –update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)
    -l, –links 保留软链结
    -L, –copy-links 想对待常规文件一样处理软链结
    –copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结
    –safe-links 忽略指向SRC路径目录树以外的链结
    -H, –hard-links 保留硬链结
    -p, –perms 保持文件权限
    -o, –owner 保持文件属主信息
    -g, –group 保持文件属组信息
    -D, –devices 保持设备文件信息
    -t, –times 保持文件时间信息
    -S, –sparse 对稀疏文件进行特殊处理以节省DST的空间
    -n, –dry-run现实哪些文件将被传输
    -W, –whole-file 拷贝文件，不进行增量检测
    -x, –one-file-system 不要跨越文件系统边界
    -B, –block-size=SIZE 检验算法使用的块尺寸，默认是700字节
    -e, –rsh=COMMAND 指定替代rsh的shell程序
    –rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息
    -C, –cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件
    –existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件
    –delete 删除那些DST中SRC没有的文件
    –delete-excluded 同样删除接收端那些被该选项指定排除的文件
    –delete-after 传输结束以后再删除
    –ignore-errors 及时出现IO错误也进行删除
    –max-delete=NUM 最多删除NUM个文件
    –partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输
    –force 强制删除目录，即使不为空
    –numeric-ids 不将数字的用户和组ID匹配为用户名和组名
    –timeout=TIME IP超时时间，单位为秒
    -I, –ignore-times 不跳过那些有同样的时间和长度的文件
    –size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间
    –modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0
    -T –temp-dir=DIR 在DIR中创建临时文件
    –compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份
    -P 等同于 –partial
    –progress 显示备份过程
    -z, –compress 对备份的文件在传输时进行压缩处理
    –exclude=PATTERN 指定排除不需要传输的文件模式
    –include=PATTERN 指定不排除而需要传输的文件模式
    –exclude-from=FILE 排除FILE中指定模式的文件
    –include-from=FILE 不排除FILE指定模式匹配的文件
    –version 打印版本信息
    –address 绑定到特定的地址
    –config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件
    –port=PORT 指定其他的rsync服务端口
    –blocking-io 对远程shell使用阻塞IO
    -stats 给出某些文件的传输状态
    –progress 在传输时现实传输过程
    –log-format=formAT 指定日志文件格式
    –password-file=FILE 从FILE中得到密码
    –bwlimit=KBPS 限制I/O带宽，KBytes per second
    -h, –help 显示帮助信息






Linux下实现文件双向同步
2011-07-15 18:07:57
标签：Linux 职场 休闲 文件双向同步 linux系统
原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。http://hx100.blog.51cto.com/44326/612301

一、Unison简介
Unison是Windows、Linux以及其他Unix平台下都可以使用的文件同步工具，它能使两个文件夹（本地或网络上的）保持内容的一致。Unison拥有与其它一些同步工具或文件系统的相同的特性，但也有自身的特点：
1.跨平台使用；
2.对内核和用户权限没有特别要求；
3.Unison是双向的，它能自动处理两分拷贝中更新没有冲突的部分，有冲突的部分将会显示出来让用户选择更新策略；
4.只要是能连通的两台主机，就可以运行unison，可以直接使用socket连接或安全的ssh连接方式，对带宽的要求不高，使用类似rsync的压缩传输协议。

环境如下：
vm1:10.13.114.19
vm2:10.13.114.32

二、编译安装Unison
Linux下通过源码包编译安装Unison时，需要用到Objective Caml compiler。
通过以下方式安装
[root@vm1 ~]# wget http://caml.inria.fr/pub/distrib/ocaml-3.12/ocaml-3.12.1.tar.gz
[root@vm1 ~]# tar -xzvf ocaml-3.12.1.tar.gz
[root@vm1 ~]# cd ocaml-3.12.1
[root@vm1 ocaml-3.12.1]# ./configure
[root@vm1 ocaml-3.12.1]# make world opt
[root@vm1 ocaml-3.12.1]# make install

编译安装Unison
[root@vm1 ~]# wget http://www.seas.upenn.edu/~bcpierce/unison//download/releases/stable/unison-2.40.63.tar.gz
[root@vm1 ~]# tar -xzvf unison-2.40.63.tar.gz
[root@vm1 ~]# cd unison-2.40.63
[root@vm1 unison-2.40.63]# make UISTYLE=text
[root@vm1 unison-2.40.63]# make install

在执行make install的过程中，可能会出现以下错误提示：
mv: cannot stat '/root/bin//unison': No such file or directory
make: [doinstall] Error 1 (ignored)
cp unison /root/bin/
cp: cannot create regular file '/root/bin/': Is a directory
make: *** [doinstall] Error 1

出现错误的原因在与Unison默认是将文件Copy到/root/bin目录，但Linux默认是没有该目录的，因此我们需要将生成的可执行文件unison复制到系统的PATH目录。
[root@vm1 unison-2.40.63]# cp unison /usr/local/bin



将可执行文件unison上传到远程主机10.13.114.32
[root@vm1 unison-2.40.63]# scp unison root@10.13.114.32:/root/
通过SSH登陆到远程主机，再将unison复制到vm2的PATH目录
[root@vm2 ~]#cp unison /usr/local/bin

三、配置ssh key信任
建议通过普通用户进行操作，理由是通过root操作本身就危险，免密码登陆的root就更危险了。

在两台服务器上创建admin用户
[root@vm1 ~]# useradd -m admin
[root@vm1 ~]# passwd 12345
[root@vm2 ~]# useradd -m admin
[root@vm2 ~]# passwd 123456

在vm1上创建key并配置vm2的信任
[root@vm1 ~]# su – unison
[admin@vm1 ~]$ ssh-keygen -t rsa
在提示保存私钥（key）和公钥（public key）的位置时，使用默认值；
在提示是否需要私钥密码（passphrase）时，直接敲回车，即不使用私钥密码。
之后，将生成一对密钥，id_rsa（私钥文件）和id_rsa.pub（公钥文件），保存在/home/unison/.ssh/目录下。

将公钥添加到vm2的 authorized_keys 文件中
将文件上传到vm2
[admin@vm1 ~]$ scp ~/.ssh/id_rsa.pub unison@10.13.114.32:/home/unison/

使用rsync用户SSH到登陆到远程主机，并将公钥添加到 authorized_keys 文件中
[admin@vm2 ~]$ mkdir .ssh
[admin@vm2 ~]$ chmod 700 .ssh
[admin@vm2 ~]$ mv ~/id_rsa.pub ~/.ssh/authorized_keys
[admin@vm2 ~]$ chmod 600 ~/.ssh/authorized_keys

同理，执行以下步骤在vm2上创建key并配置vm1的信任
[root@vm2 ~]# su – admin
[admin@vm2 ~]$ ssh-keygen -t rsa

将文件上传到vm1
[admin@vm2 ~]$ scp ~/.ssh/id_rsa.pub unison@10.13.114.19:/home/unison/

使用rsync用户SSH到登陆到vm1，并将公钥添加到 authorized_keys 文件中
[admin@vm1 ~]$ mv ~/id_rsa.pub ~/.ssh/authorized_keys

重启SSH服务
[root@vm1 ~]# /etc/init.d/sshd restart
[root@vm2 ~]# /etc/init.d/sshd restart

四、Unison的配置与使用
在两台服务器上创建test目录，用于测试
[root@vm1 ~]# su - admin
[unison@vm1 ~]$ mkdir test
[root@vm2 ~]# su - unison
[unison@vm2 ~]$ mkdir test

在两台服务器上分别执行一次unison，如果出现提示确认，则直接敲回车选择默认值
[unison@vm1 ~]$ unison /home/admin/test/ ssh://admin@10.13.114.32//home/admin/test/
[unison@vm2 ~]$ unison /home/admin/test/ ssh://admin@10.13.114.19//home/admin/test/

修改两台服务器的unison配置文件，输入以下内容
[unison@vm1 ~]$ vim /home/unison/.unison/default.prf
 

    #Unison preferences file 
    root = /home/admin/test 
    root = ssh://admin@10.13.114.32//home/admin/test/ 
    #force = 
    #ignore = 
    batch = true 
    #repeat = 1 
    #retry = 3 
    owner = true 
    group = true 
    perms = -1 
    fastcheck = false 
    rsync = false 
    sshargs = -C 
    xferbycopying = true 
    log = true 
    logfile = /home/unison/.unison/unison.log 



[unison@vm2 ~]$ vim /home/unison/.unison/default.prf

    #Unison preferences file 
    root = /home/admin/test 
    root = ssh://admin@10.13.114.19//home/admin/test/ 
    #force = 
    #ignore = 
    batch = true 
    #repeat = 1 
    #retry = 3 
    owner = true 
    group = true 
    perms = -1 
    fastcheck = false 
    rsync = false 
    sshargs = -C 
    xferbycopying = true 
    log = true 
    logfile = /home/unison/.unison/unison.log 



相关注解如下：
force表示会以本地所指定文件夹为标准，将该目录同步到远端。这里需要注意，如果指定了force参数，那么Unison就变成了单项同步了，也就是说会以force指定的文件夹为准进行同步，类似与rsync。
Unison双向同步基本原理是：假如有A B两个文件夹，A文件夹把自己的改动同步到B，B文件夹也把自己的改动同步到A，最后A B两文件夹的内容相同，是AB文件夹的合集。
Unison双向同步的一个缺点是，对于一个文件在两个同步文件夹中都被修改时，unison是不会去同步的，因为unison无法判断以那个为准。
ignore = Path表示忽略指定目录，即同步时不同步它。
batch = true，表示全自动模式，接受缺省动作，并执行。
-fastcheck true 表示同步时仅通过文件的创建时间来比较，如果选项为false，Unison则将比较两地文件的内容。
log = true 表示在终端输出运行信息。
logfile 指定输出的log文件。

另外，Unison有很多参数，这里仅介绍常用的几个，详细的请参看Unison手册。
-auto //接受缺省的动作，然后等待用户确认是否执行。
-batch //batch mode, 全自动模式，接受缺省动作，并执行。
-ignore xxx //增加 xxx 到忽略列表中
-ignorecase [true|false|default] //是否忽略文件名大小写
-follow xxx //是否支持对符号连接指向内容的同步
owner = true //保持同步过来的文件属主
group = true //保持同步过来的文件组信息
perms = -1 //保持同步过来的文件读写权限
repeat = 1 //间隔1秒后,开始新的一次同步检查
retry = 3 //失败重试
sshargs = -C //使用ssh的压缩传输方式
xferbycopying = true"
-immutable xxx //不变目录，扫描时可以忽略
-silent //安静模式
-times //同步修改时间
-path xxx 参数 //只同步 -path 参数指定的子目录以及文件，而非整个目录，-path 可以多次出现。

PS：Windows下的unison配置文件默认位于C:\Documents and Settings\currentuser\.unison目录，默认的配置文件名是default.prf。

五、测试
首先分别在server1与server2的/home/unison/test目录下创建文件或目录，然后在server1上执行unison，接着如果在server1与server2上都能看到各自创建的文件，就说明同步成功。

分别在server1与server2上创建文件
[unison@server1 ~]$ cd test
[unison@server1 test]$ touch 1.txt touch 3.txt
[unison@server2 ~]$ cd test
[unison@server2 test]$ touch 2.txt touch 4.txt

在server1上执行unison
[unison@server1 ~]$ unison

在server1与server2上查看文件是否同步
[unison@server1 ~]$ cd test
[unison@server1 test]$ ls
1.txt 2.txt 3.txt 4.txt
[unison@server2 ~]$ cd test
[unison@server2 test]$ ls
1.txt 2.txt 3.txt 4.txt

均看到了“1.txt 2.txt 3.txt 4.txt”所有文件，说明文件同步已经成功！

注意：第一次SSH连接的时候可能需要输入一次密码，之后就不需要输入了。

六、定期或实时执行同步
如果想要定期执行，则通过crontab计划任务来实现，例如通过以下方式设置每5分钟执行一次
[root@server1 ~]# su - unison
[unison@server1 ~]$ crontab -e
1    */5 * * * * /usr/local/bin/unison

